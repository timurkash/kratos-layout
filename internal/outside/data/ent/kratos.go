// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/timurkash/kratos-layout/internal/outside/data/ent/kratos"
)

// Kratos is the model entity for the Kratos schema.
type Kratos struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kratos) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kratos.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Kratos", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kratos fields.
func (k *Kratos) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kratos.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Kratos.
// Note that you need to call Kratos.Unwrap() before calling this method if this Kratos
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kratos) Update() *KratosUpdateOne {
	return (&KratosClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the Kratos entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Kratos) Unwrap() *Kratos {
	tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Kratos is not a transactional entity")
	}
	k.config.driver = tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kratos) String() string {
	var builder strings.Builder
	builder.WriteString("Kratos(")
	builder.WriteString(fmt.Sprintf("id=%v", k.ID))
	builder.WriteByte(')')
	return builder.String()
}

// KratosSlice is a parsable slice of Kratos.
type KratosSlice []*Kratos

func (k KratosSlice) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
